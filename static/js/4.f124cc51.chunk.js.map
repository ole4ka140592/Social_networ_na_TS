{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/withAuthRedirect.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","Message","className","classes","message","DialogItem","dialog","active","id","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","compose","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageAC","messagesElements","messages","map","m","dialogsElements","dialogs","d","dialogsItems","values","newMassageBody"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,mHCS5KC,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAUhC,OADmCC,YAAQN,EAARM,EAPT,SAACC,GAAgC,IAClDL,EAAwBK,EAAxBL,OAAWM,EADsC,YACzBD,EADyB,YAGtD,OAAe,IAAXL,EAAyB,cAAC,IAAD,CAAUO,GAAI,WACpC,cAACJ,EAAD,eAAeG,S,oFCdjBE,EAAU,SAACH,GACpB,OACI,qBAAKI,UAAWC,IAAQC,QAAxB,SAAkCN,EAAMM,W,QCDnCC,EAAa,SAACP,GACvB,OACI,qBAAKI,UAAWC,IAAQG,OAAS,IAAMH,IAAQI,OAA/C,SACI,cAAC,IAAD,CAASP,GAAI,YAAcF,EAAMU,GAAjC,SAAsCV,EAAMW,U,yCCsCjDC,EAAcC,YAAiB,IAmBhCC,EAAsBC,YAAkC,CAACC,KAAM,wBAAzCD,EAjBgD,SAACf,GACzE,OACI,uBAAMiB,SAAUjB,EAAMkB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAQC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBD,KAAM,iBACNa,YAAa,yBAGzB,8BACI,kD,wBC9BDC,sBACX1B,aAlBkB,SAACL,GACnB,MAAO,CACHgC,YAAahC,EAAMgC,gBAIF,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAAcD,SAU/BhC,IAFW4B,EDfQ,SAACzB,GAEpB,IAAI+B,EAAmB/B,EAAM0B,YAAYM,SAASC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAoB5B,QAAS4B,EAAE5B,SAAjB4B,EAAExB,OAEvEyB,EAAkBnC,EAAM0B,YAAYU,QAAQH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAuB3B,GAAI2B,EAAE3B,GAAIC,KAAM0B,EAAE1B,MAAxB0B,EAAE3B,OAM5E,OAAqB,IAAjBV,EAAML,OAAyB,cAAC,IAAD,CAAUO,GAAI,WAI7C,sBAAKE,UAAWC,IAAQ+B,QAAxB,UAEI,qBAAKhC,UAAWC,IAAQiC,aAAxB,SACKH,IAEL,sBAAK/B,UAAWC,IAAQ2B,SAAxB,UACI,8BAAMD,IACN,cAACjB,EAAD,CAAqBG,SAfX,SAACsB,GACnBvC,EAAM4B,YAAYW,EAAOC","file":"static/js/4.f124cc51.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__5fMls\",\"dialogsItems\":\"Dialogs_dialogsItems__3tj5J\",\"active\":\"Dialogs_active__2o91P\",\"messages\":\"Dialogs_messages__vZYq6\",\"message\":\"Dialogs_message__aktBS\"};","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (isAuth === false) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","import React from \"react\";\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from './../Dialogs.module.css'\r\n\r\ntype DialogPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogPropsType) => {\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport classes from './Dialogs.module.css'\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {DialogsPageStateType} from \"../../redux/dialogsReducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype PropsDialogsType = {\r\n    dialogsPage: DialogsPageStateType\r\n    sendMessage: (newMessageBody: string)=> void\r\n    updateNewMessageBody: (body: string)=> void\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs = (props: PropsDialogsType) => {\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n\r\n    const addNewMessage = (values: FormDataAddMessageType) => {\r\n        props.sendMessage(values.newMassageBody)\r\n    }\r\n\r\n    if (props.isAuth === false) return <Redirect to={\"/login\"}/>\r\n\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataAddMessageType = {\r\n    newMassageBody: string\r\n}\r\n\r\nconst  maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataAddMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field  component={Textarea}\r\n                        validate={[required, maxLength50]}\r\n                        name={\"newMassageBody\"}\r\n                        placeholder={\"Enter your message\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataAddMessageType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import React from \"react\";\r\nimport {DialogsPageStateType, sendMessageAC} from \"../../redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype MapStateToProps = {\r\n    dialogsPage: DialogsPageStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string)=> void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        },\r\n        // updateNewMessageBody: (body: string) => {\r\n        //     dispatch(updateNewMessageBodyAC(body))\r\n        // }\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n//// export const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent)"],"sourceRoot":""}