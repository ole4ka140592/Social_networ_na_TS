{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileStatusWithHooks/ProfileStatusWithHooks.module.css","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/Profile.module.css","components/Profile/ProfileStatusWithHooks/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","classes","onClick","value","onBlur","updateStatus","onChange","e","currentTarget","autoFocus","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","button","save","error","formSummaryError","color","Field","placeholder","component","Input","name","validate","required","type","profile","lookingForAJobDescription","Textarea","aboutMe","Object","keys","contacts","map","key","contact","ProfileInfo","Preloader","isAuth","to","formData","a","saveProfile","profileUserPhotoStatus","profileUserPhoto","src","photos","large","userPhoto","photo","isOwner","target","files","length","savePhoto","initialValues","goToEditMode","ProfileData","edit","fullName","lookingForAJob","professionalSkills","professional","contactTitle","contactValue","Contact","Post","item","alt","message","favorites","like","MyPosts","postsElements","this","posts","p","id","postsBlock","myPosts","AddPostFormRedux","values","addPost","newPostText","PureComponent","maxLength10","maxLengthCreator","post","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","descriptionBlock","Paper","style","width","myPostsContainer","ProfileContainer","userId","Number","match","params","authorizedUserId","history","push","getUserProfileThunkCreator","getUserStatusThunkCreator","refreshProfile","prevProps","prevState","snapshot","updateUserStatusThunkCreator","React","Component","compose","auth","withRouter"],"mappings":"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","file":"static/js/4.670748f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mBIGV\",\"profileUserPhoto\":\"ProfileInfo_profileUserPhoto__RYrAx\",\"photo\":\"ProfileInfo_photo__3PPCT\",\"contact\":\"ProfileInfo_contact__24sAf\",\"formSummaryError\":\"ProfileInfo_formSummaryError__2BWjU\",\"formControl\":\"ProfileInfo_formControl__37-EW\",\"error\":\"ProfileInfo_error__8wIr-\",\"edit\":\"ProfileInfo_edit__3BPO8\",\"color\":\"ProfileInfo_color__tWYIX\",\"professional\":\"ProfileInfo_professional__2LATb\",\"button\":\"ProfileInfo_button__1AKK_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatusWithHooks_status__9q0EW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ProfileDataForm_button__3l1va\",\"color\":\"ProfileDataForm_color__2sX26\",\"save\":\"ProfileDataForm_save__PP_1z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1m8zy\",\"post\":\"MyPosts_post__11-mp\",\"posts\":\"MyPosts_posts__Ntek1\",\"myPosts\":\"MyPosts_myPosts__3krlw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3b4_V\",\"photo\":\"Post_photo__35HK2\",\"favorites\":\"Post_favorites__5GOUP\",\"like\":\"Post_like__UoOgT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__nbxgX\"};","import {ChangeEvent, useEffect, useState} from \"react\";\r\nimport classes from './ProfileStatusWithHooks.module.css'\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) =>  {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n     const editModeTrue = () => {\r\n         setEditMode(true)\r\n    }\r\n\r\n    const editModeFalse = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>)=> {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    // const componentDidUpdate=(prevProps: Readonly<{status: string}>, prevState: Readonly<{}>)=> {\r\n    //     if (prevProps.status !== this.props.status) {\r\n    //         this.setState({\r\n    //             status: this.props.status\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <b className={classes.status}>Status: </b><span onClick={editModeTrue}>{props.status || \"-----\"}</span>\r\n                </div>\r\n                }\r\n                {editMode &&\r\n                <div>\r\n                    <input value={status}\r\n                           onBlur={editModeFalse}\r\n                           onChange={onStatusChange}\r\n                           autoFocus={true}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n\r\n}\r\n","import React from \"react\";\r\nimport {Input, Textarea} from \"../../../common/FormsControls/FormControls\";\r\nimport {required} from \"../../../../utils/validators/validators\";\r\nimport {ContactsType, ProfileType} from \"../../../../redux/profileReducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Contact} from \"../ProfileInfo\";\r\nimport classes from \"./ProfileDataForm.module.css\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType\r\n    onSubmit: (formData: FormProfileDataType) => void\r\n    error?: string\r\n}\r\n\r\nexport type FormProfileDataType = {\r\n    fullName: string,\r\n    lookingForAJo: boolean,\r\n    lookingForAJobDescription: string,\r\n    aboutMe: string\r\n}\r\n\r\ntype own = ProfileDataFormType & InjectedFormProps<FormProfileDataType, ProfileDataFormType>\r\n\r\nconst ProfileDataForm = (props: own) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={classes.button}>\r\n                {/*<Button variant=\"contained\" color=\"success\" size=\"small\" style={{width: '250px', height: \"20px\"}}>save</Button>*/}\r\n                <button className={classes.save}>SAVE</button>\r\n            </div>\r\n            {props.error && <div className={classes.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n\r\n            <div>\r\n                <b className={classes.color}>Full name:</b>\r\n                {<Field placeholder={\"fullName\"}\r\n                        component={Input}\r\n\r\n                        name={\"fullName\"}\r\n                        validate={required}\r\n                        type={\"fullName\"}\r\n                />}\r\n            </div>\r\n\r\n            <div>\r\n                <b className={classes.color}>Looking for a job:</b>\r\n                {<Field component={Input}\r\n                        type=\"checkbox\"\r\n                        name={\"lookingForAJo\"}\r\n                        // validate={required}\r\n                />}\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>My professional skills:</b>{props.profile.lookingForAJobDescription}\r\n                {<Field component={Textarea}\r\n                        type={\"lookingForAJobDescription\"}\r\n                        name={\"lookingForAJobDescription\"}\r\n                        validate={required}\r\n                />}\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>About me:</b>{props.profile.aboutMe}\r\n                {<Field component={Textarea}\r\n                        type={\"aboutMe\"}\r\n                        name={\"aboutMe\"}\r\n                />}\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>Contacts:</b>\r\n\r\n                {Object\r\n                    .keys(props.profile.contacts)\r\n                    .map(key => {\r\n                        return <div key={key} className={classes.contact}>\r\n                                <b className={classes.color}>{key}: {<Field placeholder={key}\r\n                                    component={Input} name={\"contacts.\" + key}/>}</b>\r\n                        </div>\r\n                        })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<FormProfileDataType, ProfileDataFormType>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ContactsType, ProfileType} from \"../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks/ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport ProfileDataForm, {FormProfileDataType} from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {Button} from \"@material-ui/core\";\r\n\r\n\r\nexport type ProfileInfoPropsType = {\r\n    isAuth: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (image: string) => void\r\n    saveProfile: (formData: FormProfileDataType) => void\r\n}\r\n\r\nexport type DataPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n\r\n    }\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n\r\n    const onSubmit = async (formData: FormProfileDataType) => {\r\n        await props.saveProfile(formData)\r\n        setEditMode(false)\r\n        // props.saveProfile(formData).then(\r\n        //     ()=> {\r\n        //         setEditMode(false)\r\n        //     })\r\n    }\r\n\r\n\r\n    return (\r\n\r\n            <div >\r\n                <div className={classes.profileUserPhotoStatus}>\r\n                    <div className={classes.profileUserPhoto}>\r\n                        <img src={props.profile.photos.large || userPhoto} className={classes.photo}/>\r\n                        <div>{props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected}/>}</div>\r\n                    </div>\r\n                    <div>\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div >\r\n                {editMode\r\n                    ? <ProfileDataForm profile={props.profile} onSubmit={onSubmit} initialValues={props.profile}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={props.profile} isOwner={props.isOwner}/>}\r\n                </div>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport const ProfileData = (props: DataPropsType) => {\r\n    return (\r\n        <div>\r\n            {props.isOwner && <div className={classes.edit}>\r\n                {/*<Button variant=\"contained\" onClick={props.goToEditMode} size=\"small\" style={{width: '250px', height: \"20px\"}}>edit</Button>*/}\r\n                <button className={classes.button} onClick={props.goToEditMode}>EDIT</button>\r\n            </div>}\r\n            <div>\r\n                <b className={classes.color}>Full name: </b>\r\n                {props.profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>Looking for a job: </b>\r\n                {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {/*{props.profile.lookingForAJob &&*/}\r\n            <div className={classes.professionalSkills}>\r\n                <b className={classes.color}> My professional skills: </b>\r\n                <div className={classes.professional}>{props.profile.lookingForAJobDescription}</div>\r\n            </div>\r\n            {/*}*/}\r\n            <div>\r\n                <b className={classes.color}>About me: </b>\r\n                <div className={classes.professional}>{props.profile.aboutMe}</div>\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>Contacts: </b>\r\n\r\n                {Object\r\n                    .keys(props.profile.contacts)\r\n                    .map(key => {\r\n\r\n                            return <Contact key={key} contactTitle={key}\r\n                                            contactValue={props.profile.contacts[key as keyof ContactsType]}/>\r\n                        }\r\n                    )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={classes.contact}><b className={classes.color}>{contactTitle}: </b>{contactValue}</div>\r\n}","import React from \"react\";\r\nimport classes from './Post.module.css'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    like: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.item}>\r\n                <img src='https://lifehacker.ru/special/fujifilm/dist/static/img/5.2410a2d.jpg'\r\n                     alt=\"\" className={classes.photo}/>\r\n                {props.message}\r\n                <div className={classes.favorites}>\r\n                    <FavoriteIcon/>\r\n                    <div>\r\n                        {props.like}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {PureComponent} from \"react\";\r\nimport classes from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profileReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormControls\";\r\n\r\n\r\ntype PropsTypeMyPosts = {\r\n    addPost: (values: string) => void\r\n    posts: Array<PostsType>\r\n}\r\n\r\nexport class MyPosts extends PureComponent<PropsTypeMyPosts> {\r\n\r\n    // shouldComponentUpdate(nextProps: Readonly<PropsTypeMyPosts>, nextState: Readonly<{}>): boolean {\r\n    //     return nextProps !== this.props || nextState !== this.state\r\n    // }\r\n\r\n    render() {\r\n\r\n        let postsElements = this.props.posts.map(p => <Post key={p.id} message={p.message} like={p.like}/>)\r\n\r\n        const addPostForm = (values: FormDataAddPostType) => {\r\n            this.props.addPost(values.newPostText)\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={classes.postsBlock}>\r\n                <h2 className={classes.myPosts}>My posts</h2>\r\n                <div>\r\n                    <AddPostFormRedux onSubmit={addPostForm}/>\r\n                </div>\r\n                <div className={classes.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport type FormDataAddPostType = {\r\n    newPostText: string\r\n}\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataAddPostType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={classes.post}>\r\n            <Field component={Textarea}\r\n                   name={\"newPostText\"}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<FormDataAddPostType>({form: \"profileAddNewPosForm\"})(AddPostForm)","import React from \"react\";\r\nimport {addPostAC, PostsType} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStateToProps = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\nimport {FormProfileDataType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport classes from \"./Profile.module.css\";\r\nimport {Paper} from \"@material-ui/core\";\r\n\r\ntype ProfilePropsType = {\r\n    isAuth: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (image: string) => void\r\n    saveProfile: (formData: FormProfileDataType) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={classes.profile}>\r\n            <div className={classes.descriptionBlock}>\r\n                <Paper style={{width: '400px'}}>\r\n                <ProfileInfo\r\n                    isAuth={props.isAuth}\r\n                    profile={props.profile}\r\n                    status={props.status}\r\n                    updateStatus={props.updateStatus}\r\n                    isOwner={props.isOwner}\r\n                    savePhoto={props.savePhoto}\r\n                    saveProfile={props.saveProfile}\r\n                />\r\n                </Paper>\r\n\r\n            </div>\r\n            <div className={classes.myPostsContainer}>\r\n                <Paper style={{width: '400px'}}>\r\n                <MyPostsContainer/>\r\n                </Paper>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    ContactsType,\r\n    getUserProfileThunkCreator,\r\n    getUserStatusThunkCreator, ProfileType, savePhoto, saveProfile,\r\n    updateUserStatusThunkCreator\r\n} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {FormProfileDataType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\n\r\nimport classes from './ProfileContainer.module.css'\r\n\r\n// export type MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\nexport type MapStateToPropsType = {\r\n    isAuth: boolean,\r\n    profile: ProfileType,\r\n    status: string,\r\n    authorizedUserId: number | null\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    getUserProfileThunkCreator: (userId: number | null) => void\r\n    getUserStatusThunkCreator: (userId: number | null) => void\r\n    updateUserStatusThunkCreator: (status: string) => void\r\n    savePhoto: (image: string)=> void\r\n    saveProfile: (formData: FormProfileDataType)=> void\r\n}\r\ntype MapStateAndDispatchToPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MathParamsType = {\r\n    userId: string\r\n}\r\ntype AllMathParamsType = RouteComponentProps<MathParamsType>\r\ntype ProfileContainerType = MapStateAndDispatchToPropsType & AllMathParamsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n\r\n            if (!userId) {\r\n                // if (!userId) {\r\n                    this.props.history.push(\"/login\")\r\n                // }\r\n            }\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getUserStatusThunkCreator(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n        this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div >\r\n                <Profile\r\n                    isAuth={this.props.isAuth}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateUserStatusThunkCreator}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: AppStateType) {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        getUserStatusThunkCreator, updateUserStatusThunkCreator, savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}