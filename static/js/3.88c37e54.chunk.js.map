{"version":3,"sources":["hoc/withAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","value","onBlur","updateStatus","onChange","e","currentTarget","autoFocus","ProfileInfo","profile","className","classes","descriptionBlock","aboutMe","Preloader","Post","item","src","alt","message","like","MyPosts","postsElements","this","posts","map","p","id","postsBlock","AddPostFormRedux","onSubmit","values","addPost","newPostText","PureComponent","maxLength10","maxLengthCreator","reduxForm","form","handleSubmit","Field","component","Textarea","name","validate","required","MyPostsContainer","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","Number","match","params","authorizedUserId","history","push","getUserProfileThunkCreator","getUserStatusThunkCreator","updateUserStatusThunkCreator","React","compose","withRouter"],"mappings":"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","file":"static/js/3.88c37e54.chunk.js","sourcesContent":["import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n    const RedirectComponent = (props: MapStateToPropsType) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (isAuth === false) return <Redirect to={\"/login\"}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    const ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mBIGV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1m8zy\",\"posts\":\"MyPosts_posts__Ntek1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3b4_V\"};","import {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) =>  {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n     const editModeTrue = () => {\r\n         setEditMode(true)\r\n    }\r\n\r\n    const editModeFalse = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>)=> {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    // const componentDidUpdate=(prevProps: Readonly<{status: string}>, prevState: Readonly<{}>)=> {\r\n    //     if (prevProps.status !== this.props.status) {\r\n    //         this.setState({\r\n    //             status: this.props.status\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <span onClick={editModeTrue}>{props.status || \"-----\"}</span>\r\n                </div>\r\n                }\r\n                {editMode &&\r\n                <div>\r\n                    <input value={status}\r\n                           onBlur={editModeFalse}\r\n                           onChange={onStatusChange}\r\n                           autoFocus={true}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n\r\n}\r\n","import React from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ProfileType} from \"../../../redux/profileReducer\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\n\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks\";\r\n\r\nexport type ProfileInfoPropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n}\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {/*<div>*/}\r\n            {/*    <img src='https://www.votpusk.ru/country/cnimages/new/italy.jpg'/>*/}\r\n            {/*</div>*/}\r\n\r\n            <div className={classes.descriptionBlock}>\r\n                <div>ava + description</div>\r\n\r\n                {/*<img src={props.profile.photos.large}/>*/}\r\n\r\n                    {props.profile.aboutMe}\r\n\r\n\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from './Post.module.css'\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    like: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.item}>\r\n                <img src='https://lifehacker.ru/special/fujifilm/dist/static/img/5.2410a2d.jpg' alt=\"\"/>\r\n                {props.message}\r\n                <div>\r\n                    <span>like</span>{props.like}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {PureComponent} from \"react\";\r\nimport classes from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profileReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormControls\";\r\n\r\n\r\ntype PropsTypeMyPosts = {\r\n    addPost: (values: string) => void\r\n    posts: Array<PostsType>\r\n}\r\n\r\nexport class MyPosts extends PureComponent<PropsTypeMyPosts> {\r\n\r\n    // shouldComponentUpdate(nextProps: Readonly<PropsTypeMyPosts>, nextState: Readonly<{}>): boolean {\r\n    //     return nextProps !== this.props || nextState !== this.state\r\n    // }\r\n\r\n    render() {\r\n\r\n        let postsElements = this.props.posts.map(p => <Post key={p.id} message={p.message} like={p.like}/>)\r\n\r\n        const addPostForm = (values: FormDataAddPostType) => {\r\n            this.props.addPost(values.newPostText)\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={classes.postsBlock}>\r\n                <h3>My posts</h3>\r\n                <div>\r\n                    <AddPostFormRedux onSubmit={addPostForm}/>\r\n                </div>\r\n                <div className={classes.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport type FormDataAddPostType = {\r\n    newPostText: string\r\n}\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataAddPostType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea}\r\n                   name={\"newPostText\"}\r\n                   validate={[required, maxLength10]}\r\n            />\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<FormDataAddPostType>({form: \"profileAddNewPosForm\"})(AddPostForm)","import React from \"react\";\r\nimport {addPostAC, PostsType} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStateToProps = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string)=> void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    getUserStatusThunkCreator,\r\n    ProfileType,\r\n    updateUserStatusThunkCreator\r\n} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\n// export type MapStateToPropsType = {\r\n//     profile: ProfileType\r\n//     status: string\r\n//     authorizedUserId: number | null\r\n//     isAuth: boolean\r\n// }\r\n\r\nexport type MapStateToPropsType = ReturnType<typeof mapStateToProps>\r\n\r\nexport type MapDispatchToPropsType = {\r\n    getUserProfileThunkCreator: (userId: number | null) => void\r\n    getUserStatusThunkCreator: (userId: number | null) => void\r\n    updateUserStatusThunkCreator: (status: string) => void\r\n}\r\ntype MapStateAndDispatchToPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MathParamsType = {\r\n    userId: string\r\n}\r\ntype AllMathParamsType = RouteComponentProps<MathParamsType>\r\ntype ProfileContainerType = MapStateAndDispatchToPropsType & AllMathParamsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    componentDidMount() {\r\n        let userId: number | null = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                if (!userId) {\r\n                    this.props.history.push(\"/login\")\r\n                }\r\n            }\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getUserStatusThunkCreator(userId)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateUserStatusThunkCreator}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: AppStateType) {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        getUserStatusThunkCreator, updateUserStatusThunkCreator\r\n    }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}