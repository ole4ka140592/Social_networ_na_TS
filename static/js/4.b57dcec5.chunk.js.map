{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileStatusWithHooks/ProfileStatusWithHooks.module.css","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileStatusWithHooks/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","className","classes","onClick","value","onBlur","updateStatus","onChange","e","currentTarget","autoFocus","ProfileDataFormReduxForm","reduxForm","form","onSubmit","handleSubmit","button","save","error","formSummaryError","color","Field","placeholder","component","Input","name","validate","required","type","profile","lookingForAJobDescription","Textarea","aboutMe","Object","keys","contacts","map","key","contact","ProfileInfo","isAuth","to","formData","a","saveProfile","profileUserPhotoStatus","profileUserPhoto","src","photos","large","userPhoto","photo","file","isOwner","target","files","length","savePhoto","custom","initialValues","goToEditMode","ProfileData","edit","fullName","lookingForAJob","professionalSkills","professional","contactTitle","contactValue","Contact","Post","item","alt","message","favorites","like","MyPosts","postsElements","this","posts","p","id","postsBlock","myPosts","AddPostFormRedux","values","addPost","newPostText","PureComponent","maxLength10","maxLengthCreator","post","field","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","authId","useSelector","auth","userId","profileId","descriptionBlock","Paper","myPostsContainer","ProfileContainer","Number","match","params","authorizedUserId","history","push","getUserProfileThunkCreator","getUserStatusThunkCreator","refreshProfile","prevProps","prevState","snapshot","profileContainer","updateUserStatusThunkCreator","preloader","Preloader2","React","Component","compose","withRouter"],"mappings":"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","file":"static/js/4.b57dcec5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__nbxgX\",\"descriptionBlock\":\"Profile_descriptionBlock__aW19D\",\"myPostsContainer\":\"Profile_myPostsContainer__wWc6x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__mBIGV\",\"profileUserPhoto\":\"ProfileInfo_profileUserPhoto__RYrAx\",\"photo\":\"ProfileInfo_photo__3PPCT\",\"file\":\"ProfileInfo_file__2NoXV\",\"custom\":\"ProfileInfo_custom__1Hqrn\",\"contact\":\"ProfileInfo_contact__24sAf\",\"formSummaryError\":\"ProfileInfo_formSummaryError__2BWjU\",\"formControl\":\"ProfileInfo_formControl__37-EW\",\"error\":\"ProfileInfo_error__8wIr-\",\"edit\":\"ProfileInfo_edit__3BPO8\",\"color\":\"ProfileInfo_color__tWYIX\",\"professional\":\"ProfileInfo_professional__2LATb\",\"fullName\":\"ProfileInfo_fullName__UVvTJ\",\"contacts\":\"ProfileInfo_contacts__2fa-5\",\"button\":\"ProfileInfo_button__1AKK_\",\"preloader\":\"ProfileInfo_preloader__2tOaz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatusWithHooks_status__9q0EW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ProfileDataForm_button__3l1va\",\"color\":\"ProfileDataForm_color__2sX26\",\"save\":\"ProfileDataForm_save__PP_1z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1m8zy\",\"post\":\"MyPosts_post__11-mp\",\"field\":\"MyPosts_field__1m7IN\",\"posts\":\"MyPosts_posts__Ntek1\",\"myPosts\":\"MyPosts_myPosts__3krlw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3b4_V\",\"photo\":\"Post_photo__35HK2\",\"favorites\":\"Post_favorites__5GOUP\",\"like\":\"Post_like__UoOgT\"};","import {ChangeEvent, useEffect, useState} from \"react\";\r\nimport classes from './ProfileStatusWithHooks.module.css'\r\n\r\nexport type ProfileStatusPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusPropsType) =>  {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n     const editModeTrue = () => {\r\n         setEditMode(true)\r\n    }\r\n\r\n    const editModeFalse = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>)=> {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n        return (\r\n            <div>\r\n                {!editMode &&\r\n                <div>\r\n                    <b className={classes.status}>Status: </b><span onClick={editModeTrue}>{props.status || \"-----\"}</span>\r\n                </div>\r\n                }\r\n                {editMode &&\r\n                <div>\r\n                    <input value={status}\r\n                           onBlur={editModeFalse}\r\n                           onChange={onStatusChange}\r\n                           autoFocus={true}/>\r\n                </div>\r\n                }\r\n            </div>\r\n        )\r\n\r\n}\r\n","import React from \"react\";\r\nimport {Input, Textarea} from \"../../../common/FormsControls/FormControls\";\r\nimport {required} from \"../../../../utils/validators/validators\";\r\nimport {ProfileType} from \"../../../../redux/profileReducer\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport classes from \"./ProfileDataForm.module.css\";\r\n\r\n\r\ntype ProfileDataFormType = {\r\n    profile: ProfileType\r\n    onSubmit: (formData: FormProfileDataType) => void\r\n    error?: string\r\n}\r\n\r\nexport type FormProfileDataType = {\r\n    fullName: string,\r\n    lookingForAJo: boolean,\r\n    lookingForAJobDescription: string,\r\n    aboutMe: string\r\n}\r\n\r\ntype own = ProfileDataFormType & InjectedFormProps<FormProfileDataType, ProfileDataFormType>\r\n\r\nconst ProfileDataForm = (props: own) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div className={classes.button}>\r\n                <button className={classes.save}>SAVE</button>\r\n            </div>\r\n            {props.error && <div className={classes.formSummaryError}>\r\n                {props.error}\r\n            </div>}\r\n\r\n            <div>\r\n                <b className={classes.color}>Full name:</b>\r\n                {<Field placeholder={\"fullName\"}\r\n                        component={Input}\r\n                        name={\"fullName\"}\r\n                        validate={required}\r\n                        type={\"fullName\"}\r\n                />}\r\n            </div>\r\n\r\n            <div>\r\n                <b className={classes.color}>Looking for a job:</b>\r\n                {<Field component={Input}\r\n                        type=\"checkbox\"\r\n                        placeholder={\"lookingForAJob\"}\r\n                        name={\"lookingForAJo\"}\r\n                    // validate={required}\r\n                />}\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>My professional skills:</b>{props.profile.lookingForAJobDescription}\r\n                {<Field component={Textarea}\r\n                        type={\"lookingForAJobDescription\"}\r\n                        name={\"lookingForAJobDescription\"}\r\n                        validate={required}\r\n                />}\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>About me:</b>{props.profile.aboutMe}\r\n                {<Field component={Textarea}\r\n                        type={\"aboutMe\"}\r\n                        name={\"aboutMe\"}\r\n                />}\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>Contacts:</b>\r\n\r\n                {Object\r\n                    .keys(props.profile.contacts)\r\n                    .map(key => {\r\n                        return <div key={key} className={classes.contact}>\r\n                            <b className={classes.color}>{key}: {<Field placeholder={key}\r\n                                                                        component={Input}\r\n                                                                        name={\"contacts.\" + key}/>}</b>\r\n                        </div>\r\n                    })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<FormProfileDataType, ProfileDataFormType>({form: \"edit-profile\"})(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm","import React, {useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css'\r\nimport {ContactsType, ProfileType} from \"../../../redux/profileReducer\";\r\nimport {ProfileStatusWithHooks} from \"../ProfileStatusWithHooks/ProfileStatusWithHooks\";\r\nimport userPhoto from \"../../../assets/images/user.png\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport ProfileDataForm, {FormProfileDataType} from \"./ProfileDataForm/ProfileDataForm\";\r\n\r\n\r\nexport type ProfileInfoPropsType = {\r\n    isAuth: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (image: string) => void\r\n    saveProfile: (formData: FormProfileDataType) => void\r\n}\r\n\r\nexport type DataPropsType = {\r\n    profile: ProfileType\r\n    isOwner?: boolean\r\n    goToEditMode?: () => void\r\n}\r\n\r\n\r\nexport const ProfileInfo = (props: ProfileInfoPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n\r\n    const onMainPhotoSelected = (e: any) => {\r\n        if (e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    if (!props.isAuth) return <Redirect to={'/login'}/>\r\n\r\n\r\n    const onSubmit = async (formData: FormProfileDataType) => {\r\n        await props.saveProfile(formData)\r\n        setEditMode(false)\r\n    }\r\n\r\n\r\n    return (\r\n            <div >\r\n                <div className={classes.profileUserPhotoStatus}>\r\n                    <div className={classes.profileUserPhoto}>\r\n                        <img src={props.profile.photos.large || userPhoto} className={classes.photo}/>\r\n                        <div className={classes.file}>{props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} className={classes.custom}/>}</div>\r\n                    </div>\r\n                    <div>\r\n                    <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                    </div>\r\n                </div>\r\n\r\n                <div >\r\n                {editMode\r\n                    ? <ProfileDataForm profile={props.profile} onSubmit={onSubmit} initialValues={props.profile}/>\r\n                    : <ProfileData goToEditMode={() => {\r\n                        setEditMode(true)\r\n                    }} profile={props.profile} isOwner={props.isOwner}/>}\r\n                </div>\r\n            </div>\r\n\r\n    )\r\n}\r\n\r\nexport const ProfileData = (props: DataPropsType) => {\r\n    return (\r\n        <div>\r\n            {props.isOwner && <div className={classes.edit}>\r\n               <button className={classes.button} onClick={props.goToEditMode}>EDIT</button>\r\n            </div>}\r\n            <div>\r\n                <b className={classes.color}>Full name: </b>\r\n                <div className={classes.fullName}>{props.profile.fullName}</div>\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>Looking for a job: </b>\r\n                {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            <div className={classes.professionalSkills}>\r\n                <b className={classes.color}> My professional skills: </b>\r\n                <div className={classes.professional}>{props.profile.lookingForAJobDescription}</div>\r\n            </div>\r\n            {/*}*/}\r\n            <div>\r\n                <b className={classes.color}>About me: </b>\r\n                <div className={classes.professional}>{props.profile.aboutMe}</div>\r\n            </div>\r\n            <div>\r\n                <b className={classes.color}>Contacts: </b>\r\n                <div className={classes.contacts}>\r\n\r\n                {Object\r\n                    .keys(props.profile.contacts)\r\n                    .map(key => {\r\n\r\n                            return <Contact key={key} contactTitle={key}\r\n                                            contactValue={props.profile.contacts[key as keyof ContactsType]}/>\r\n                        }\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string\r\n    contactValue: string\r\n}\r\n\r\nexport const Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return <div className={classes.contact}><b className={classes.color}>{contactTitle}: </b>{contactValue}</div>\r\n}","import React from \"react\";\r\nimport classes from './Post.module.css'\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\n\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    like: number\r\n}\r\n\r\nexport const Post: React.FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.item}>\r\n                <img src='https://lifehacker.ru/special/fujifilm/dist/static/img/5.2410a2d.jpg'\r\n                     alt=\"\" className={classes.photo}/>\r\n                {props.message}\r\n                <div className={classes.favorites}>\r\n                    <FavoriteIcon/>\r\n                    <div>\r\n                        {props.like}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {PureComponent} from \"react\";\r\nimport classes from './MyPosts.module.css'\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/profileReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormControls\";\r\n\r\n\r\ntype PropsTypeMyPosts = {\r\n    addPost: (values: string) => void\r\n    posts: Array<PostsType>\r\n}\r\n\r\nexport class MyPosts extends PureComponent<PropsTypeMyPosts> {\r\n\r\n    render() {\r\n\r\n        let postsElements = this.props.posts.map(p => <Post key={p.id} message={p.message} like={p.like}/>)\r\n\r\n        const addPostForm = (values: FormDataAddPostType) => {\r\n            this.props.addPost(values.newPostText)\r\n            values.newPostText=\"\"\r\n        }\r\n\r\n\r\n        return (\r\n            <div className={classes.postsBlock}>\r\n                <h2 className={classes.myPosts}>My posts</h2>\r\n                <div>\r\n                    <AddPostFormRedux onSubmit={addPostForm}/>\r\n                </div>\r\n                <div className={classes.posts}>\r\n                    {postsElements}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport type FormDataAddPostType = {\r\n    newPostText: string\r\n}\r\n\r\nlet maxLength10 = maxLengthCreator(10)\r\n\r\nconst AddPostForm: React.FC<InjectedFormProps<FormDataAddPostType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={classes.post}>\r\n            <Field component={Textarea}\r\n                   name={\"newPostText\"}\r\n                   validate={[required, maxLength10]}\r\n                   className={classes.field}\r\n            />\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<FormDataAddPostType>({form: \"profileAddNewPosForm\"})(AddPostForm)","import React from \"react\";\r\nimport {addPostAC, PostsType} from \"../../../redux/profileReducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStateToProps = {\r\n    posts: Array<PostsType>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/profileReducer\";\r\nimport {FormProfileDataType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport classes from \"./Profile.module.css\";\r\nimport {Paper} from \"@material-ui/core\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\ntype ProfilePropsType = {\r\n    isAuth: boolean\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (image: string) => void\r\n    saveProfile: (formData: FormProfileDataType) => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n\r\n    const authId = useSelector<AppStateType, number | null>(state => state.auth.userId)\r\n    const profileId = useSelector<AppStateType, number | undefined>(state => state.profilePage.profile?.userId)\r\n\r\n    return (\r\n        <div className={classes.profile}>\r\n            <div className={classes.descriptionBlock}>\r\n                <Paper>\r\n                    <ProfileInfo\r\n                        isAuth={props.isAuth}\r\n                        profile={props.profile}\r\n                        status={props.status}\r\n                        updateStatus={props.updateStatus}\r\n                        isOwner={props.isOwner}\r\n                        savePhoto={props.savePhoto}\r\n                        saveProfile={props.saveProfile}\r\n                    />\r\n                </Paper>\r\n            </div>\r\n            <>\r\n                {authId === profileId ? <div className={classes.myPostsContainer}>\r\n                    <Paper>\r\n                        <MyPostsContainer/>\r\n                    </Paper>\r\n                </div> : \"\"}\r\n            </>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    getUserStatusThunkCreator, ProfileType, savePhoto, saveProfile,\r\n    updateUserStatusThunkCreator\r\n} from \"../../redux/profileReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {FormProfileDataType} from \"./ProfileInfo/ProfileDataForm/ProfileDataForm\";\r\nimport classes from \"./Profile.module.css\";\r\nimport Preloader2 from \"../common/Preloader/Preloader2\";\r\n\r\n\r\n\r\nexport type MapStateToPropsType = {\r\n    isAuth: boolean,\r\n    profile: ProfileType,\r\n    status: string,\r\n    authorizedUserId: number | null\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    getUserProfileThunkCreator: (userId: number | null) => void\r\n    getUserStatusThunkCreator: (userId: number | null) => void\r\n    updateUserStatusThunkCreator: (status: string) => void\r\n    savePhoto: (image: string)=> void\r\n    saveProfile: (formData: FormProfileDataType)=> void\r\n}\r\ntype MapStateAndDispatchToPropsType = MapStateToPropsType & MapDispatchToPropsType\r\ntype MathParamsType = {\r\n    userId: string\r\n}\r\ntype AllMathParamsType = RouteComponentProps<MathParamsType>\r\ntype ProfileContainerType = MapStateAndDispatchToPropsType & AllMathParamsType\r\n\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = Number(this.props.match.params.userId)\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n\r\n            if (!userId) {\r\n                // if (!userId) {\r\n                    this.props.history.push(\"/login\")\r\n                // }\r\n            }\r\n        }\r\n        this.props.getUserProfileThunkCreator(userId)\r\n        this.props.getUserStatusThunkCreator(userId)\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId)\r\n        this.refreshProfile()\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.profile) {\r\n            return <div className={classes.preloader}><Preloader2/></div>\r\n        }\r\n        return (\r\n\r\n            <div className={classes.profileContainer}>\r\n                <Profile\r\n                    isAuth={this.props.isAuth}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    profile={this.props.profile}\r\n                    status={this.props.status}\r\n                    updateStatus={this.props.updateUserStatusThunkCreator}\r\n                    savePhoto={this.props.savePhoto}\r\n                    saveProfile={this.props.saveProfile}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state: AppStateType) {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileThunkCreator,\r\n        getUserStatusThunkCreator, updateUserStatusThunkCreator, savePhoto,\r\n        saveProfile\r\n    }),\r\n    withRouter,\r\n    // withAuthRedirect\r\n)(ProfileContainer)"],"sourceRoot":""}