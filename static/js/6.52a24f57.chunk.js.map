{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","Message","props","className","classes","message","DialogItem","dialog","active","to","id","name","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","messages","Field","component","Textarea","validate","required","placeholder","mapStateToProps","state","isAuth","auth","compose","connect","dialogsPage","dispatch","sendMessage","newMessageBody","sendMessageAC","Component","RedirectComponent","this","React","messagesElements","map","m","dialogsElements","dialogs","d","style","width","maxWidth","bgcolor","dialogsElementsMessagesElements","List","sx","aria-label","Divider","ListItem","button","divider","ListItemText","primary","light","values","newMassageBody"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,SAAW,0BAA0B,gCAAkC,mD,8FCO/GC,EAAU,SAACC,GACpB,OACI,qBAAKC,UAAWC,IAAQC,QAAxB,SAAkCH,EAAMG,W,QCDnCC,EAAa,SAACJ,GACvB,OACI,qBAAKC,UAAWC,IAAQG,OAAS,IAAMH,IAAQI,OAA/C,SACI,cAAC,IAAD,CAASC,GAAI,YAAcP,EAAMQ,GAAjC,SAAsCR,EAAMS,U,8ECuDlDC,EAAcC,YAAiB,IAmB/BC,EAAsBC,YAAkC,CAACC,KAAM,wBAAzCD,EAjBgD,SAACb,GACzE,OACI,uBAAMe,SAAUf,EAAMgB,aAAcf,UAAWC,IAAQe,SAAvD,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXC,SAAU,CAACC,IAAUZ,GACrBD,KAAM,iBACNc,YAAa,yBAGxB,8BACI,kD,uDCtEVC,EAAkB,SAACC,GAAD,MAA+C,CAC/DC,OAAQD,EAAME,KAAKD,SCuBZE,sBACXC,aAhBkB,SAACJ,GACnB,MAAO,CACHC,OAAQD,EAAME,KAAKD,OACnBI,YAAaL,EAAMK,gBAIF,SAACC,GACtB,MAAO,CACHC,YAAa,SAACC,GACVF,EAASG,YAAcD,UDb5B,SAA6BE,GAAiB,IAE3CC,EAF0C,4JAGhD,WACI,OAAKC,KAAKrC,MAAM0B,OACT,cAACS,EAAD,eAAeE,KAAKrC,QADI,cAAC,IAAD,CAAUO,GAAI,eAJD,GAEhB+B,IAAMH,WAStC,OADiCN,YAAQL,EAAiB,KAAzBK,CAA+BO,KCQrDR,EFtBQ,SAAC5B,GAEpB,IAAIuC,EAAmBvC,EAAM8B,YAAYb,SAASuB,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAoBtC,QAASsC,EAAEtC,SAAjBsC,EAAEjC,OAEvEkC,EAAkB1C,EAAM8B,YAAYa,QAAQH,KAAI,SAAAI,GAAC,OAAI,cAAC,EAAD,CAAuBpC,GAAIoC,EAAEpC,GAAIC,KAAMmC,EAAEnC,MAAxBmC,EAAEpC,OAO5E,IAAKR,EAAM0B,OACP,OAAO,cAAC,IAAD,CAAUnB,GAAI,WAGzB,IAAMsC,EAAQ,CACVC,MAAO,QACPC,SAAU,IACVC,QAAS,oBAGb,OACI,sBAAK/C,UAAWC,IAAQyC,QAAxB,UACI,sBAAK1C,UAAWC,IAAQ+C,gCAAxB,UACI,8BACI,eAACC,EAAA,EAAD,CAAMC,GAAIN,EAAO1B,UAAU,MAAMiC,aAAW,kBAA5C,UACI,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,SAAO,EAAxB,SACI,cAACC,EAAA,EAAD,CAAcC,QAAShB,MAE3B,cAACW,EAAA,EAAD,CAASM,OAAK,SAGtB,8BACI,eAACT,EAAA,EAAD,CAAMC,GAAIN,EAAO1B,UAAU,MAAMiC,aAAW,kBAA5C,UACI,cAACC,EAAA,EAAD,IACA,cAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,SAAO,EAAxB,SACI,cAACC,EAAA,EAAD,CAAcC,QAASnB,MAE3B,cAACc,EAAA,EAAD,CAASM,OAAK,YAK1B,qBAAK1D,UAAWC,IAAQe,SAAxB,SACI,cAACL,EAAD,CAAqBG,SAvCX,SAAC6C,GACnB5D,EAAMgC,YAAY4B,EAAOC,gBACzBD,EAAOC,eAAe","file":"static/js/6.52a24f57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__5fMls\",\"messages\":\"Dialogs_messages__vZYq6\",\"dialogsElementsMessagesElements\":\"Dialogs_dialogsElementsMessagesElements__3yJuH\"};","import React from \"react\";\r\nimport classes from './../Dialogs.module.css'\r\n\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from './../Dialogs.module.css'\r\n\r\ntype DialogPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nexport const DialogItem = (props: DialogPropsType) => {\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport classes from './Dialogs.module.css'\r\nimport {Message} from \"./Message/Message\";\r\nimport {DialogItem} from \"./DialogItem/DialogItem\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormsControls/FormControls\";\r\nimport {maxLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {OwnPropsType} from \"./DialogsContainer\";\r\nimport {Divider, List, ListItem, ListItemText} from \"@material-ui/core\";\r\n\r\n\r\nexport const Dialogs = (props: OwnPropsType) => {\r\n\r\n    let messagesElements = props.dialogsPage.messages.map(m => <Message key={m.id} message={m.message}/>)\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs.map(d => <DialogItem key={d.id} id={d.id} name={d.name}/>)\r\n\r\n    const addNewMessage = (values: FormDataAddMessageType) => {\r\n        props.sendMessage(values.newMassageBody)\r\n        values.newMassageBody=\"\"\r\n    }\r\n\r\n    if (!props.isAuth) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    const style = {\r\n        width: '250px',\r\n        maxWidth: 360,\r\n        bgcolor: 'background.paper',\r\n    };\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsElementsMessagesElements}>\r\n                <div>\r\n                    <List sx={style} component=\"nav\" aria-label=\"mailbox folders\">\r\n                        <Divider/>\r\n                        <ListItem button divider>\r\n                            <ListItemText primary={dialogsElements}/>\r\n                        </ListItem>\r\n                        <Divider light/>\r\n                    </List>\r\n                </div>\r\n                <div>\r\n                    <List sx={style} component=\"nav\" aria-label=\"mailbox folders\">\r\n                        <Divider/>\r\n                        <ListItem button divider>\r\n                            <ListItemText primary={messagesElements}/>\r\n                        </ListItem>\r\n                        <Divider light/>\r\n                    </List>\r\n                </div>\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype FormDataAddMessageType = {\r\n    newMassageBody: string\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50)\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<FormDataAddMessageType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={classes.messages}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       validate={[required, maxLength50]}\r\n                       name={\"newMassageBody\"}\r\n                       placeholder={\"Enter your message\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataAddMessageType>({form: \"dialogAddMessageForm\"})(AddMessageForm)","import {Redirect} from \"react-router-dom\";\r\nimport React, {ComponentType} from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/reduxStore\";\r\nimport {ReactComponent} from \"*.svg\";\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n        isAuth: state.auth.isAuth\r\n})\r\n\r\ntype OwnType = ComponentType & MapStateToPropsType\r\n\r\nexport function withAuthRedirect<T>(Component: any) {\r\n\r\n    class RedirectComponent extends React.Component<OwnType> {\r\n    render() {\r\n        if (!this.props.isAuth) return <Redirect to={\"/login\"}/>\r\n        return <Component {...this.props}/>\r\n    }\r\n\r\n    }\r\ndebugger\r\n    let ConnectedRedirectComponent = connect(mapStateToProps, null)(RedirectComponent)\r\n    return ConnectedRedirectComponent\r\n}\r\n","import React from \"react\";\r\nimport {DialogsPageStateType, sendMessageAC} from \"../../redux/dialogsReducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n    dialogsPage: DialogsPageStateType\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    sendMessage: (newMessageBody: string)=> void\r\n}\r\n\r\nexport type OwnPropsType = MapDispatchToPropsType & MapStateToProps\r\nlet mapStateToProps = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n    return {\r\n        sendMessage: (newMessageBody: string) => {\r\n            dispatch(sendMessageAC(newMessageBody))\r\n        },\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect<MapStateToProps,MapDispatchToPropsType,{},AppStateType>(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect)(Dialogs)\r\n\r\n"],"sourceRoot":""}