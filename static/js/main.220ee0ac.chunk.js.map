{"version":3,"sources":["redux/dialogsReducer.ts","components/Navbar/Navbar.module.css","assets/images/user.png","api/api.ts","components/Users/Users.module.css","components/common/Preloader/Preloader.module.css","components/common/FormsControls/FormControls.module.css","reportWebVitals.ts","redux/sidebarReducer.ts","redux/usersReducer.ts","redux/authReducer.ts","redux/appReducer.ts","redux/reduxStore.ts","components/Navbar/Navbar.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersPresentationComponent.tsx","redux/usersSelectors.tsx","components/Users/UsersContainer.tsx","components/Login/LoginForm.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/common/FormsControls/FormControls.tsx","assets/images/loading.gif","components/common/Preloader/Preloader.tsx","components/common/Paginator/Paginator.module.css","utils/validators/validators.tsx","components/Header/Header.module.css","redux/profileReducer.ts"],"names":["dialogsPageState","dialogs","id","name","messages","message","dialogsReducer","state","action","type","body","newMessageBody","stateCopy","sendMessageAC","module","exports","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","photoFile","formData","FormData","append","saveProfile","authAPI","me","login","email","password","rememberMe","logOuth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","FOLLOW","UNFOLLOW","SET_USERS","SET_CURRENT_PAGE","SET_TOTAL_USERS_COUNT","SET_FETCHING","TOGGLE_IS_FOLLOWING_PROGRESS","usersPageState","users","totalUsersCount","isFetching","followingInProgress","setUsers","setCurrentPage","setFetching","toggleFollowingProgress","SET_USER_DATA","authPageState","isAuth","setAuthUserData","getAuthUserDataThunkCreator","dispatch","resultCode","INITIALIZED_SUCCESS","initialized","rootReducer","combineReducers","profilePage","profileReducer","dialogsPage","sidebar","usersPage","map","m","followed","totalCount","filter","auth","form","formReducer","app","store","createStore","applyMiddleware","thunk","window","Navbar","className","classes","nav","item","to","activeClassName","activeLink","News","Music","Settings","Header","props","header","alt","src","loginBlock","onClick","loginOuth","HeaderContainer","this","React","Component","connect","Paginator","pageCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","paginator","f","selectedPage","e","onPageChanged","margin","User","user","photos","small","userPhoto","photo","disabled","some","followThunkCreator","unFollowThunkCreator","UsersPresentationComponent","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","pageNumber","getUsersPageChangedThunkCreator","Preloader","compose","items","LoginReduxForm","reduxForm","onSubmit","handleSubmit","Field","placeholder","component","Input","validate","required","error","formSummaryError","length","stopSubmit","_error","DialogsContainer","lazy","ProfileContainer","App","initializeApp","path","render","Suspense","fallback","withRouter","ReactDOM","document","getElementById","Textarea","input","meta","hasError","touched","formControl","loading","img","value","maxLengthCreator","maxLength","SET_USER_PROFILE","profilePageState","posts","like","profile","newPost","Date","getTime","newPostText","setStatus","addPostAC","getUserProfileThunkCreator","getUserStatusThunkCreator","res","updateUserStatusThunkCreator","file","getState"],"mappings":"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","file":"static/js/main.220ee0ac.chunk.js","sourcesContent":["import {ActionsTypes} from \"./reduxStore\";\r\n\r\nexport type DialogsType = {\r\n    id: number\r\n    name: string\r\n}\r\nexport type MessagesType = {\r\n    id: number\r\n    message: string\r\n}\r\n// export type DialogsPageType = {\r\n//     dialogs: Array<DialogsType>\r\n//     messages: Array<MessagesType>\r\n//     newMessageBody: string\r\n// }\r\n\r\nexport let dialogsPageState = {\r\n    dialogs: [\r\n        {id: 1, name: 'Dimych'},\r\n        {id: 2, name: 'Andrey'},\r\n        {id: 3, name: 'Sveta'},\r\n        {id: 4, name: 'Sasha'},\r\n        {id: 5, name: 'Viktor'},\r\n        {id: 6, name: 'Valera'},\r\n    ] as Array<DialogsType>,\r\n    messages: [\r\n        {id: 1, message: 'Hi'},\r\n        {id: 2, message: 'How are you'},\r\n        {id: 3, message: 'Yoy'},\r\n        {id: 4, message: 'Yoy'},\r\n        {id: 5, message: 'Yoy'},\r\n    ] as Array<MessagesType>,\r\n    // newMessageBody: \"\"\r\n}\r\n\r\nexport type DialogsPageStateType = typeof dialogsPageState\r\n\r\n\r\nexport const dialogsReducer = (state: DialogsPageStateType = dialogsPageState,\r\n                               action: ActionsTypes): DialogsPageStateType => {\r\n\r\n\r\n    switch (action.type) {\r\n        // case \"UPDATE-NEW-MESSAGE-BODY\": {\r\n        //     let stateCopy = {\r\n        //         ...state,\r\n        //         newMessageBody: action.body\r\n        //     }\r\n        //     return stateCopy\r\n        // }\r\n\r\n        case \"SEND-MESSAGE\": {\r\n            let body = action.newMessageBody\r\n            let stateCopy = {\r\n                ...state,\r\n                // newMessageBody : \"\",\r\n                messages: [...state.messages, {id: 6, message: body}]\r\n            }\r\n\r\n            return stateCopy\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type DialogsReducerType = SendMessageAC\r\n    // | UpdateNewMessageBodyAC\r\n\r\n// export type UpdateNewMessageBodyAC = ReturnType<typeof updateNewMessageBodyAC>\r\n//\r\n// export const updateNewMessageBodyAC = (body: string) => {\r\n//     return {\r\n//         type: \"UPDATE-NEW-MESSAGE-BODY\",\r\n//         body\r\n//     } as const\r\n// }\r\n\r\nexport type SendMessageAC = ReturnType<typeof sendMessageAC>\r\n\r\nexport const sendMessageAC = (newMessageBody: string) => {\r\n    return {\r\n        type: \"SEND-MESSAGE\",\r\n        newMessageBody\r\n    } as const\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2H6h1\",\"item\":\"Navbar_item__1tYbL\",\"activeLink\":\"Navbar_activeLink__EZMo7\"};","export default __webpack_public_path__ + \"static/media/user.dae3c84f.png\";","import axios from \"axios\";\r\nimport {ProfileType} from \"../redux/profileReducer\";\r\nimport {FormProfileDataType} from \"../components/Profile/ProfileInfo/ProfileDataForm\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: \"https://social-network.samuraijs.com/api/1.0/\",\r\n    headers: {\r\n        \"API-KEY\": \"3ffd8bee-6a2a-4b2d-9367-b8070697f4c5\"\r\n    }\r\n})\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n\r\n    follow(userId: number) {\r\n        return instance.post(`follow/${userId}`)\r\n\r\n    },\r\n\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`)\r\n    },\r\n\r\n    getProfile(userId: number) {\r\n        console.warn(\"Obsolete method. Please profileAPI object.\")\r\n        return profileAPI.getProfile(userId)\r\n    },\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get(`profile/` + userId)\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get(`profile/status/` + userId)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put(`profile/status/`, {status})\r\n    },\r\n    savePhoto(photoFile: string) {\r\n        const formData= new FormData()\r\n        formData.append(\"image\", photoFile)\r\n\r\n        return instance.put(`profile/photo/`, formData, {\r\n            headers: {\r\n                \"Content-Type\": \"multipart/form-data\"\r\n            }\r\n        })\r\n    },\r\n    saveProfile(formData: FormProfileDataType) {\r\n        return instance.put(`profile`, formData)\r\n    },\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe})\r\n    },\r\n    logOuth() {\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__2PEZu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"img\":\"Preloader_img__lQgch\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormControls_formControl__2GvxM\",\"error\":\"FormControls_error__Q-HQp\",\"formSummaryError\":\"FormControls_formSummaryError__1sAFn\"};","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {ActionsTypes} from \"./reduxStore\";\r\n\r\n\r\nexport type SidebarType = {}\r\n\r\nlet initialState : SidebarType = {}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport type SidebarReducerType = ReturnType<typeof sidebarReducer>\r\n\r\nexport const sidebarReducer=(state: InitialStateType = initialState, action: ActionsTypes)\r\n    : InitialStateType=> {\r\n\r\n    switch(action.type) {\r\n\r\n        default: return state\r\n\r\n    }\r\n\r\n}","import {ActionsTypes} from \"./reduxStore\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\nconst FOLLOW = \"FOLLOW\"\r\nconst UNFOLLOW = \"UNFOLLOW\"\r\nconst SET_USERS = \"SET_USERS\"\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\"\r\nconst SET_TOTAL_USERS_COUNT = \"SET_TOTAL_USERS_COUNT\"\r\nconst SET_FETCHING = \"SET_FETCHING\"\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\"\r\n\r\nexport type UserType = {\r\n    id: number\r\n    name: string\r\n    status: string\r\n    photos: {\r\n        small: string | null,\r\n        large: string | null\r\n    }\r\n    followed: boolean\r\n    location: {\r\n        city: string | null\r\n        country: string | null\r\n    }\r\n}\r\n\r\n// export type UsersPageStateType = typeof usersPageState\r\n\r\nexport type UsersPageStateType = {\r\n    users: Array<UserType>,\r\n    totalUsersCount: number,\r\n    pageSize: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport let usersPageState = {\r\n\r\n    users: [] as Array<UserType>,\r\n    totalUsersCount: 0,\r\n    pageSize: 5,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nexport const usersReducer = (state: UsersPageStateType = usersPageState,\r\n                             action: ActionsTypes): UsersPageStateType => {\r\n\r\n    switch (action.type) {\r\n\r\n        case FOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m => m.id === action.userId ? {...m, followed: true} : m)\r\n            }\r\n        }\r\n\r\n        case UNFOLLOW: {\r\n            return {\r\n                ...state,\r\n                users: state.users.map(m => m.id === action.userId ? {...m, followed: false} : m)\r\n            }\r\n        }\r\n\r\n        case SET_USERS: {\r\n            return {...state, users: action.users}\r\n        }\r\n\r\n        case SET_CURRENT_PAGE: {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n\r\n        case SET_TOTAL_USERS_COUNT: {\r\n            return {...state, totalUsersCount: action.totalCount}\r\n        }\r\n\r\n        case SET_FETCHING: {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS: {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type UsersReducerType =\r\n    Follow\r\n    | Unfollow\r\n    | SetUsers\r\n    | SetCurrentPage\r\n    | SetTotalUsersCount\r\n    | SetFetching\r\n    | FollowingInProgress\r\n\r\nexport type Follow = ReturnType<typeof follow>\r\n\r\nexport const follow = (userId: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport type Unfollow = ReturnType<typeof unfollow>\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport type SetUsers = ReturnType<typeof setUsers>\r\n\r\nexport const setUsers = (users: Array<UserType>) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users: users\r\n    } as const\r\n}\r\n\r\nexport type SetCurrentPage = ReturnType<typeof setCurrentPage>\r\n\r\nexport const setCurrentPage = (currentPage: number) => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n}\r\n\r\nexport type SetTotalUsersCount = ReturnType<typeof setTotalUsersCount>\r\n\r\nexport const setTotalUsersCount = (totalCount: number) => {\r\n    return {\r\n        type: SET_TOTAL_USERS_COUNT,\r\n        totalCount\r\n    } as const\r\n}\r\n\r\nexport type SetFetching = ReturnType<typeof setFetching>\r\n\r\nexport const setFetching = (isFetching: boolean) => {\r\n    return {\r\n        type: SET_FETCHING,\r\n        isFetching: isFetching\r\n    } as const\r\n}\r\n\r\nexport type FollowingInProgress = ReturnType<typeof toggleFollowingProgress>\r\n\r\nexport const toggleFollowingProgress = (isFetching: boolean, userId: number) => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const getUsersThunkCreator = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setFetching(true))\r\n        dispatch(setCurrentPage(currentPage))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(setFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n    }\r\n}\r\n\r\nexport const getUsersPageChangedThunkCreator = (pageNumber: number, pageSize: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setCurrentPage(pageNumber))\r\n\r\n        dispatch(setFetching(true))\r\n        usersAPI.getUsers(pageNumber, pageSize).then(data => {\r\n            dispatch(setFetching(false))\r\n            dispatch(setUsers(data.items))\r\n        })\r\n    }\r\n}\r\n\r\nexport const followThunkCreator = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.unfollow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(unfollow(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n\r\nexport const unFollowThunkCreator = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleFollowingProgress(true, userId))\r\n        usersAPI.follow(userId)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(follow(userId))\r\n                }\r\n                dispatch(toggleFollowingProgress(false, userId))\r\n            })\r\n    }\r\n}\r\n\r\n\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_DATA = \"SAMURAI-NETWORK/AUTH/SET_USER_DATA\"\r\n\r\nexport type AuthPageStateType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\n\r\nexport let authPageState = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n}\r\n\r\nexport const authReducer = (state: AuthPageStateType = authPageState, action: AuthReducerType)\r\n    : AuthPageStateType => {\r\n\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                isAuth: action.isAuth,\r\n                userId: action.userId,\r\n                email: action.email,\r\n                login: action.login\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type AuthReducerType = SetUserData\r\nexport type SetUserData = ReturnType<typeof setAuthUserData>\r\n\r\nexport const setAuthUserData = (userId: number | null, login: string | null,\r\n                                email: string | null,\r\n                                isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        userId,\r\n        login,\r\n        email,\r\n        isAuth\r\n\r\n    } as const\r\n}\r\n\r\nexport const getAuthUserDataThunkCreator = () => (dispatch: Dispatch) => {\r\n   return authAPI.me()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                let {id, login, email} = response.data.data\r\n                debugger\r\n                dispatch(setAuthUserData(id, login, email, true));\r\n            }\r\n        })\r\n\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean) =>\r\n    (dispatch: any) => {\r\n        authAPI.login(email, password, rememberMe)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(getAuthUserDataThunkCreator());\r\n                } else {\r\n                    let message = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\"\r\n                    dispatch(stopSubmit(\"login\", {_error: message}))\r\n                }\r\n            })\r\n    }\r\n\r\nexport const loginOuth = () => (dispatch: Dispatch) => {\r\n    authAPI.logOuth()\r\n        .then(response => {\r\n            debugger\r\n            if (response.data.resultCode === 0) {\r\n                debugger\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n        })\r\n}\r\n\r\n\r\n\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport {getAuthUserDataThunkCreator} from \"./authReducer\";\r\nimport {AppStateType} from \"./reduxStore\";\r\n\r\n\r\nconst INITIALIZED_SUCCESS = \"SET_INITIALIZED\"\r\n\r\ntype InitialStateStateType = {\r\n    initialized: boolean\r\n}\r\n\r\nexport let initialState = {\r\n    initialized: false\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown,InitializedSuccessType >\r\n\r\nexport const appReducer = (state = initialState, action: InitializedSuccessType): InitialStateStateType=> {\r\n\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS: {\r\n\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type InitializedSuccessType = ReturnType<typeof initializedSuccess>\r\n\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: INITIALIZED_SUCCESS\r\n    } as const\r\n}\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserDataThunkCreator())\r\n    promise\r\n        .then(()=> {\r\n            dispatch(initializedSuccess())\r\n        })\r\n\r\n}\r\n\r\n\r\n\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {AddPostType, profileReducer, ProfileReducerType} from \"./profileReducer\";\r\nimport {dialogsReducer, SendMessageAC} from \"./dialogsReducer\";\r\nimport {sidebarReducer} from \"./sidebarReducer\";\r\nimport {usersReducer, UsersReducerType} from \"./usersReducer\";\r\nimport {authReducer, AuthReducerType} from \"./authReducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport {appReducer, InitializedSuccessType} from \"./appReducer\";\r\n\r\n\r\nexport type ActionsTypes = AddPostType | SendMessageAC | ProfileReducerType | AuthReducerType\r\n    |UsersReducerType | InitializedSuccessType\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebar: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport let store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport classes from './Navbar.module.css'\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <nav className={classes.nav}>\r\n            <div className={classes.item}>\r\n                <NavLink to='/profile' activeClassName={classes.activeLink}>Profile</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/users' activeClassName={classes.activeLink}>Users</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/dialogs' activeClassName={classes.activeLink}>Messages</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/news' activeClassName={classes.activeLink}>News</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/music' activeClassName={classes.activeLink}>Music</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/settings' activeClassName={classes.activeLink}>Settings</NavLink>\r\n            </div>\r\n            <div className={classes.item}>\r\n                <NavLink to='/login' activeClassName={classes.activeLink}>Login</NavLink>\r\n            </div>\r\n        </nav>\r\n\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const News = () => {\r\n    return (\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const Music = () => {\r\n    return (\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport const Settings = () => {\r\n    return (\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport classes from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\nexport type HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null,\r\n    loginOuth: ()=> void\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={classes.header}>\r\n            <img alt=\"\"\r\n                src='https://img2.freepng.ru/20180304/lpw/kisspng-airplane-flight-logo-clip-art-space-shuttle-5a9b9a1d9ee683.3404936215201469736509.jpg' />\r\n\r\n            <div className={classes.loginBlock}>\r\n                {props.isAuth && <div>{props.login} - <button onClick={props.loginOuth}>Log out</button></div>}\r\n                    {/*// ? <div>{props.login} - <button onClick={props.loginOuth}>Log out</button></div>*/}\r\n                    {/*// : <NavLink to={\"/login\"}>Login</NavLink>}*/}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from \"react\";\r\nimport {Header, HeaderPropsType} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {loginOuth} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\n\r\n\r\ntype AuthPropsType = MapStateToPropsType & MapDispatchToPropsType & HeaderPropsType\r\n\r\nexport type MapStateToPropsType = typeof mapStateToProps\r\n\r\ntype MapDispatchToPropsType = {\r\n    loginOuth: ()=> void\r\n}\r\n\r\nclass HeaderContainer extends React.Component<AuthPropsType> {\r\n\r\n    render() {\r\n    return <Header\r\n        isAuth={this.props.isAuth}\r\n        login={this.props.login}\r\n        loginOuth={this.props.loginOuth}\r\n    />\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login\r\n})\r\n\r\nexport default connect (mapStateToProps, {loginOuth})\r\n(HeaderContainer)","import React, {useState} from \"react\";\r\nimport classes from './Paginator.module.css'\r\n\r\ntype PaginatorType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n\r\n}\r\n\r\nexport const Paginator = (props: PaginatorType) => {\r\n    let portionSize = 10\r\n    let pageCount = Math.ceil(props.totalUsersCount / props.pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionCount = Math.ceil(props.totalUsersCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return (\r\n        <div className={classes.paginator}>\r\n            {portionNumber > 1 && <button onClick={() =>\r\n                setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n\r\n\r\n            <span>\r\n                    {pages\r\n                        .filter(f => f >= leftPortionPageNumber && f <= rightPortionPageNumber)\r\n                        .map(m => <span className={\r\n                            props.currentPage === m\r\n                                ? classes.selectedPage\r\n                                : \"\"}\r\n                                        onClick={(e) => {\r\n                                            props.onPageChanged(m)\r\n                                        }} key={m}>\r\n                            <span className={classes.margin}>{m}</span></span>)}\r\n                </span>\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>PREV</button>}\r\n        </div>\r\n    )\r\n}\r\n","import classes from './Users.module.css'\r\nimport userPhoto from \"../../assets/images/user.png\"\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype UserType = {\r\n    user: any\r\n    follow: (userID: number) => void\r\n    followingInProgress: Array<number>\r\n    followThunkCreator: (userID: number) => void\r\n    unFollowThunkCreator: (userID: number) => void\r\n}\r\n\r\nexport const User = (props: UserType) => {\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n                        <span>\r\n                            <div>\r\n                                <NavLink to={\"/profile/\" + props.user.id}>\r\n                                <img src={props.user.photos.small !== null ? props.user.photos.small : userPhoto} alt=\"\"\r\n                                     className={classes.photo}/>\r\n                                    </NavLink>\r\n                            </div>\r\n                            <div>\r\n                                {props.user.followed\r\n                                    ? <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                              onClick={() => {\r\n                                                  props.followThunkCreator(props.user.id)\r\n                                              }}>Unfollow</button>\r\n                                    : <button disabled={props.followingInProgress.some(id => id === props.user.id)}\r\n                                              onClick={() => {\r\n                                                  props.unFollowThunkCreator(props.user.id)\r\n                                              }}>Follow</button>\r\n                                }\r\n                            </div>\r\n                        </span>\r\n            <span>\r\n                            <span>\r\n                                <div>{props.user.name}</div>\r\n                                <div>{props.user.status}</div>\r\n                            </span>\r\n                            <span>\r\n                                <div>{\"m.location.country\"}</div>\r\n                                <div>{\"m.location.city\"}</div>\r\n                            </span>\r\n                        </span>\r\n        </div>)\r\n}\r\n\r\n","import classes from './Users.module.css'\r\nimport userPhoto from \"../../assets/images/user.png\"\r\nimport React from \"react\";\r\nimport {UserType} from \"../../redux/usersReducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Paginator} from \"../common/Paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\n\r\ntype UsersPresentationComponentPropsType = {\r\n    onPageChanged: (pageNumber: number) => void\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    unfollow: (userID: number) => void\r\n    follow: (userID: number) => void\r\n    users: Array<UserType>\r\n    followingInProgress: Array<number>\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    followThunkCreator: (userID: number) => void\r\n    unFollowThunkCreator: (userID: number) => void\r\n}\r\n\r\nexport const UsersPresentationComponent = (props: UsersPresentationComponentPropsType) => {\r\n\r\n    return (\r\n        <div>\r\n            <Paginator\r\n                totalUsersCount={props.totalUsersCount}\r\n                pageSize={props.pageSize}\r\n                currentPage={props.currentPage}\r\n                onPageChanged={props.onPageChanged}\r\n            />\r\n            <div>\r\n                {\r\n                    props.users.map(m => <User\r\n                        user={m}\r\n                        follow={props.follow}\r\n                        followingInProgress={props.followingInProgress}\r\n                        followThunkCreator={props.followThunkCreator}\r\n                        unFollowThunkCreator={props.unFollowThunkCreator}\r\n                        key={m.id}\r\n                    />)\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import {AppStateType} from \"./reduxStore\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport {follow, followThunkCreator, getUsersPageChangedThunkCreator, getUsersThunkCreator,\r\n    toggleFollowingProgress,\r\n    unfollow, unFollowThunkCreator,\r\n    UserType\r\n} from \"../../redux/usersReducer\";\r\nimport React from \"react\";\r\nimport {UsersPresentationComponent} from \"./UsersPresentationComponent\";\r\nimport {Preloader} from \"../common/Preloader/Preloader\";\r\nimport {compose} from \"redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/usersSelectors\";\r\n\r\n\r\ntype UsersPropsType = MapStateToPropsType & MapDispatchToPropsType\r\nclass UsersContainer extends React.Component<UsersPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.getUsersPageChangedThunkCreator(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : \"\"}\r\n            <UsersPresentationComponent onPageChanged={this.onPageChanged}\r\n                                        totalUsersCount={this.props.totalUsersCount}\r\n                                        pageSize={this.props.pageSize}\r\n                                        currentPage={this.props.currentPage}\r\n                                        unfollow={this.props.unfollow}\r\n                                        follow={this.props.follow}\r\n                                        users={this.props.users}\r\n                                        followingInProgress={this.props.followingInProgress}\r\n                                        toggleFollowingProgress={this.props.toggleFollowingProgress}\r\n                                        followThunkCreator={this.props.followThunkCreator}\r\n                                        unFollowThunkCreator={this.props.unFollowThunkCreator}\r\n\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    users: Array<UserType>,\r\n    // usersPage: UsersPageStateType,\r\n    pageSize: number,\r\n    totalUsersCount: number,\r\n    currentPage: number,\r\n    isFetching: boolean,\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport type MapDispatchToPropsType = {\r\n    follow: (userID: number) => void\r\n    unfollow: (userID: number) => void\r\n    // setUsers: (users: Array<UserType>) => void\r\n    // setCurrentPage: (pageNumber: number) => void\r\n    // setTotalUsersCount: (totalCount: number) => void\r\n    // setFetching: (isFetching: boolean) => void\r\n    toggleFollowingProgress: (isFetching: boolean, userId: number) => void\r\n    getUsers: (currentPage: number, pageSize: number)=> void\r\n    getUsersPageChangedThunkCreator: (pageNumber: number, pageSize: number)=> void\r\n    followThunkCreator: (userId: number)=> void\r\n    unFollowThunkCreator: (userId: number)=> void\r\n}\r\n\r\n// function mapStateToProps(state: AppStateType): MapStateToPropsType {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\n\r\nfunction mapStateToProps(state: AppStateType): MapStateToPropsType {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow, unfollow,\r\n        // setUsers, setCurrentPage,\r\n        // setTotalUsersCount, setFetching,\r\n        toggleFollowingProgress,\r\n        getUsers: getUsersThunkCreator,\r\n        getUsersPageChangedThunkCreator,\r\n        followThunkCreator, unFollowThunkCreator\r\n    })\r\n)(UsersContainer)","import React from \"react\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {Input} from \"../common/FormsControls/FormControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport classes from \"../common/FormsControls/FormControls.module.css\";\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field placeholder={\"Email\"}\r\n                       component={Input}\r\n                       name={\"email\"}\r\n                       validate={required}/>\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"}\r\n                       component={Input}\r\n                       name={\"password\"}\r\n                       validate={required}\r\n                       type={\"password\"}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field component={Input}\r\n                       type=\"checkbox\"\r\n                       name={\"rememberMe\"}/>\r\n                       remember me\r\n            </div>\r\n            {props.error && <div className={classes.formSummaryError}>{props.error}</div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<FormDataType>({form: \"login\"})(LoginForm)","import {FormDataType, LoginReduxForm} from \"./LoginForm\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/authReducer\";\r\nimport {AppStateType} from \"../../redux/reduxStore\";\r\nimport React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst Login: React.FC<MapDispatchToPropsType & MapStateToPropsType> = (props) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe)\r\n    }\r\n\r\n\r\n    if (props.isAuth) {\r\n        debugger\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean)=> void\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)\r\n","import React, {Component, ComponentType, Suspense} from 'react';\nimport './App.css';\nimport {Navbar} from \"./components/Navbar/Navbar\";\nimport {Route, withRouter} from \"react-router-dom\";\nimport {News} from \"./components/News/News\";\nimport {Music} from \"./components/Music/Music\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\nimport UsersContainer from \"./components/Users/UsersContainer\";\nimport Login from \"./components/Login/Login\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {AppStateType} from \"./redux/reduxStore\";\nimport {Preloader} from \"./components/common/Preloader/Preloader\";\nimport {initializeApp} from \"./redux/appReducer\";\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'));\n// import ProfileContainer from \"./components/Profile/ProfileContainer\";\n// import DialogsContainer from \"./components/Dialogs/DialogsContainer\";\n\n\nclass App extends Component<AppType> {\n\n    componentDidMount() {\n        this.props.initializeApp()\n    }\n\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\ndebugger\n        return (\n            <div className='app-wrapper'>\n                <div className='header'>\n                    <HeaderContainer/>\n                </div>\n                <div className='navbarAndContent'>\n                    <div className='navbar'>\n                        <Navbar/>\n                    </div>\n                    <div className='app-wrapper-content'>\n                        {/*<Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>*/}\n                        <Route path='/users' render={() => <UsersContainer/>}/>\n                        <Route path='/news' render={() => <News/>}/>\n                        <Route path='/music' render={() => <Music/>}/>\n                        <Route path='/settings' render={() => <Settings/>}/>\n                        <Route path='/login' render={() => <Login/>}/>\n                        <Route path='/dialogs' render={() => {\n                            debugger\n                            return <React.Suspense fallback={<div>Загрузка...</div>}>\n                                <DialogsContainer/>\n                            </React.Suspense>\n                        }}/>\n                        <Route path='/profile/:userId?' render={() => {\n                            return <React.Suspense fallback={<div>Загрузка...</div>}>\n                                <ProfileContainer/>\n                            </React.Suspense>\n                        }}/>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\ntype AppType = MapStateToPropsType & MapDispatchToPropsType\n\ntype MapDispatchToPropsType = {\n    initializeApp: () => void\n}\n\n// type MapDispatchToPropsType = ReturnType<typeof initializeApp>\n    type MapStateToPropsType = ReturnType<typeof mapStateToProps>\n\nconst mapStateToProps = (state: AppStateType) => ({\n    initialized: state.app.initialized\n})\n\nexport default compose<ComponentType>(\n    withRouter,\n    connect<MapStateToPropsType,MapDispatchToPropsType,{},AppStateType>(mapStateToProps, {initializeApp})\n)(App)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/reduxStore\";\nimport App from \"./App\";\n\n\nReactDOM.render(\n    <HashRouter >\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </HashRouter>, document.getElementById('root')\n);\n\n\n// store.subscribe(()=> {rerenderEntireTree()})\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import {WrappedFieldProps} from \"redux-form\";\r\nimport classes from \"./FormControls.module.css\";\r\nimport React from \"react\";\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n            <div>\r\n                <textarea {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = ({input, meta, ...props}) => {\r\n\r\n    const hasError = meta.touched && meta.error\r\n\r\n    return (\r\n        <div className={classes.formControl + \" \" + (hasError ? classes.error : \"\")}>\r\n            <div>\r\n                <input {...input} {...props}/>\r\n            </div>\r\n            {hasError && <span>{meta.error}</span>}\r\n        </div>\r\n    )\r\n}\r\n","export default __webpack_public_path__ + \"static/media/loading.6d98a7d4.gif\";","import loading from \"../../../assets/images/loading.gif\";\r\nimport React from \"react\";\r\nimport classes from \"./Preloader.module.css\";\r\n\r\nexport const Preloader = () => {\r\n    return (\r\n        <div>\r\n            <img src={loading} className={classes.img} alt=\"\"/>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectedPage\":\"Paginator_selectedPage__l5ley\",\"margin\":\"Paginator_margin__ff5Uh\"};","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return \"Field is required\"\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__nh3Y3\",\"loginBlock\":\"Header_loginBlock__2qdgM\"};","import {ActionsTypes, AppStateType} from \"./reduxStore\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {FormProfileDataType} from \"../components/Profile/ProfileInfo/ProfileDataForm\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\n\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\"\r\nconst SET_STATUS = \"SET_STATUS\"\r\nconst SAVE_PHOTO_SUCCESS = \"SAVE_PHOTO_SUCCESS\"\r\n\r\nexport type PostsType = {\r\n    id: number\r\n    message: string\r\n    like: number\r\n}\r\n\r\nexport type ContactsType = {\r\n    facebook: string,\r\n    website: string,\r\n    vk: string,\r\n    twitter: string,\r\n    instagram: string,\r\n    youtube: string,\r\n    github: string,\r\n    mainLink: string\r\n}\r\n\r\ntype PhotosType = {\r\n    small: string | null,\r\n    large: string | null\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number,\r\n    lookingForAJob: boolean,\r\n    lookingForAJobDescription: string,\r\n    fullName: string,\r\n    contacts: ContactsType,\r\n    photos: PhotosType,\r\n    aboutMe: string\r\n}\r\n\r\nlet profilePageState = {\r\n    posts: [\r\n        {id: 1, message: 'Hi, how are you?', like: 15},\r\n        {id: 2, message: 'It is my first post', like: 20}\r\n    ] as Array<PostsType>,\r\n    // newPostText: '',\r\n    profile: null as ProfileType | null,\r\n    status: ''\r\n}\r\n\r\nexport type ProfilePageStateType = typeof profilePageState\r\n\r\nexport const profileReducer = (state: ProfilePageStateType = profilePageState,\r\n                               action: ActionsTypes): ProfilePageStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            const newPost: PostsType = {\r\n                id: new Date().getTime(),\r\n                message: action.newPostText,\r\n                like: 0\r\n            }\r\n            let stateCopy = {\r\n                ...state,\r\n                posts: [...state.posts, newPost],\r\n            }\r\n            return stateCopy\r\n        }\r\n\r\n        case SET_USER_PROFILE: {\r\n            return {...state, profile: action.profile}\r\n        }\r\n\r\n        case \"SET_STATUS\": {\r\n            return {...state, status: action.status}\r\n        }\r\n\r\n        case \"SAVE_PHOTO_SUCCESS\": {\r\n            return {...state, profile: {...state.profile, photos: action.photos} as ProfileType}\r\n        }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport type ProfileReducerType = AddPostType | SetUserProfileType | SetStatusType | SavePhotoSuccessType\r\n\r\nexport type SetStatusType = ReturnType<typeof setStatus>\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\nexport type AddPostType = ReturnType<typeof addPostAC>\r\nexport const addPostAC = (newPostText: string) => {\r\n    return {\r\n        type: \"ADD-POST\",\r\n        newPostText\r\n    } as const\r\n}\r\n\r\nexport type SetUserProfileType = ReturnType<typeof setUserProfile>\r\nexport const setUserProfile = (profile: ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport type SavePhotoSuccessType = ReturnType<typeof savePhotoSuccess>\r\nexport const savePhotoSuccess = (photos: PhotosType) => {\r\n    return {\r\n        type: SAVE_PHOTO_SUCCESS,\r\n        photos\r\n    } as const\r\n}\r\n\r\n\r\nexport const getUserProfileThunkCreator = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getProfile(userId)\r\n            .then(response => {\r\n                dispatch(setUserProfile(response.data))\r\n            })\r\n    }\r\n}\r\n\r\nexport const getUserStatusThunkCreator = (userId: number) => (dispatch: Dispatch) => {\r\n    profileAPI.getStatus(userId)\r\n        .then((res) => {\r\n            dispatch(setStatus(res.data))\r\n        })\r\n}\r\n\r\nexport const updateUserStatusThunkCreator = (status: string) => (dispatch: Dispatch) => {\r\n    profileAPI.updateStatus(status)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setStatus(status))\r\n            }\r\n        })\r\n}\r\n\r\nexport const savePhoto = (file: string) => (dispatch: Dispatch) => {\r\n    profileAPI.savePhoto(file)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(savePhotoSuccess(res.data.data.photos))\r\n            }\r\n        })\r\n}\r\n\r\nexport const saveProfile = (formData: FormProfileDataType) => (dispatch: Dispatch<any>, getState: any) => {\r\n    const userId = getState().auth.userId\r\n    profileAPI.saveProfile(formData)\r\n        .then((res) => {\r\n            debugger\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(getUserProfileThunkCreator(userId))\r\n            } else {\r\n                let message = res.data.messages.length > 0 ? res.data.messages[0] : \"Some error\"\r\n                dispatch(stopSubmit(\"edit-profile\", {_error: message}))\r\n                // return Promise.reject(res.data.messages[0])\r\n            }\r\n        })\r\n}"],"sourceRoot":""}